Preguntas orientadoras
1. Describa brevemente los diferentes perfiles de familias de microprocesadores/microcontroladores de ARM. Explique alguna de sus diferencias características.
    En las familias de microcontroladores ARM podemos encontrar los siguientes perfiles:
    - Cortex A: procesadores de alto rendimiento.
    - Cortex R: procesadores orientados a sistemas de tiempo real donde se necesita baja latencia y alta capacidad de procesamiento.
    - Cortex M: procesadores orientados a dispositivos de consumo masivo y sistemas embebidos compactos. 

Cortex M
1. Describa brevemente las diferencias entre las familias de procesadores Cortex M0, M3 y M4.
    Los procesadores Cortex M0/M0+ fueron diseñados para bajo consumo y bajo costo, mientras que los M3 y M4 presentan mayor performance, agregando funcionalidades para el procesamiento digital de señales, unidad de protección de memoria, etc.

    La arquitectura de los procesadores M0 es Von Neumann (ARMv6-M), mientras que los procesadores M3 y M4 presentan arquitectura Harvard (ARMv7-M).

    Los procesadores M0 poseen un set de instrucciones reducido, utilizando la mayoria de las instrucciones Thumb y algunas Thumb-2, mientras que los procesadores M3 y M4, utilizan el set completo. 

    Los procesadores M0 y M3 no poseen unidad de punto flotante, mientras que en los M4 es opcional, de acuerdo al fabricante. 

    Los procesadores M3 y M4 poseen división por hardware y aritmética saturada, mientras que los M0 no. 

2. ¿Por qué se dice que el set de instrucciones Thumb permite mayor densidad de código? Explique
    Densidad de código se refiere a la cantidad de intrucciones necesarias para realizar una determinada operación y a cuánto espacio ocupa cada instrucción en memoria.
    El código nativo de ARM utiliza sólo instrucciones de 32 bits, lo que no permite generar una buena densidad de código. Con el set de instrucciones Thumb, se logra una mayor densidad de código al reducir el tamaño de la mayoría de las instrucciones de 32 bits a 16 bits, dejando las instrucciones de 32 bits para branches.

3. ¿Qué entiende por arquitectura load-store? ¿Qué tipo de instrucciones no posee este tipo de arquitectura?
    Una arquitectura load-store significa que para realizar cualquier operación con datos, primero deben ser cargados de la memoria a un registro del microprocesador, luego procesados y posteriormente, vueltos a grabar en memoria. Todo esto en intrucciones separadas. Esta arquitectura no permite a la mayoría de las instrucciones el acceso a la memoria, sólo permite instrucciones de carga y almacenamiento. 

4. ¿Cómo es el mapa de memoria de la familia?
    El mapa de memoria de la familia es plano con capacidad de direccionar 4 GB. 

5. ¿Qué ventajas presenta el uso de los “shadowed pointers” del PSP y el MSP?
    Permiten la conmutación por hardware de los punteros de pila para códigos corriendo en distintos niveles de privilegio.

6. Describa los diferentes modos de privilegio y operación del Cortex M, sus relaciones y como se conmuta de uno al otro. Describa un ejemplo en el que se pasa del modo privilegiado a no priviligiado y nuevamente a privilegiado.
    Existen dos modos de operación en los cortex M: Thread Mode y Handler Mode. En el modo Thread, se puede ejecutar código en modo privilegiado o no privilegiado. El modo Handler siempre se ejecuta en modo privilegiado.
    El pasaje de modo privilegiado a no privilegiado se hace por software, mientras que si se está en modo no privilegiado, sólo se puede volver al modo privilegiado mediante una interrupción.
    Un ejemplo de uso podría ser en un sistema operativo, en donde al iniciar el sistema, se arranca en modo privilegiado. Luego, las tareas se ejecutan en modo no privilegiado hasta que ocurre una interrupción, en donde dentro del Handler de la interrupción se está en modo privilegiado y se puede cambiar el registro de control del modo para pasar a modo privilegiado y ejecutar las tareas en ese modo. 

7. ¿Qué se entiende por modelo de registros ortogonal? Dé un ejemplo
    Significa que se puede aplicar cualquier instrucción a cualquier registro. Por ejemplo, se puede aplicar la instrucción ADD r0, r1, r2 como también ADD r6, r7, r8 o cualquier otro grupo de registros.

8. ¿Qué ventajas presenta el uso de intrucciones de ejecución condicional (IT)? Dé un ejemplo
    Permite ejecutar o no ciertas instrucciones sin que haya un cambio de flujo en el programa por el agregado de ramas. Esto evita que se destruya el pipeline y por consiguiente se puede lograr mayor velocidad de ejecución.
    Por ejemplo, se puede utilizar la instrucción ANDNE para realizar un AND entre dos registros si el flag Z está en cero.  

9. Describa brevemente las excepciones más prioritarias (reset, NMI, Hardfault).
    Reset: Ocurre al iniciar el programa. Reinicia el core del ARM.
    NMI: Interrupción no enmascarable. Se suele utilizar para el watchdog o para alertar al procesador que la tensión de alimentación cayó por debajo de cierto valor.
    Hardfault: es una excepción genérica para atender cualquier tipo de falla que no fue atendida por otra interrupción.

10. Describa las funciones principales de la pila. ¿Cómo resuelve la arquitectura el llamado a funciones y su retorno?
    La pila permite pasar datos a funciones o subrutinas, guardar variables locales, guardar el estado del procesador y de los registros de propósito general cuando ocurre una interrupción
    Al llamar a una función, se guardan los registros r0 a r3, r12, LR, PSR y PC en la pila, es decir el contexto de trabajo. Al retornar de la función se cargan nuevamente los valores del contexto.

11. Describa la secuencia de reset del microprocesador.
    El procesador lee las 2 primeras palabras de la memoria. La primer palabra contiene el valor inicial del MSP y la segunda, la dirección inicial del handler del reset. Luego setea el MSP y el PC con los valores leídos anteriormente. Finalmente, comienza a ejecutar la primera instrucción.

12. ¿Qué entiende por “core peripherals”? ¿Qué diferencia existe entre estos y el resto de los periféricos?
    Son los periféricos que conforman el procesador. En los Cortex-M podemos encontrar el NVIC, Systick timer y MPU entre otros. Se diferencian del resto de los periféricos en que estos son indispensables para el funcionamiento de la arquitectura. 

13. ¿Cómo se implementan las prioridades de las interrupciones? Dé un ejemplo
    Las prioridades de la interrupciones se programan en el NVIC. Las tres primeras fuentes de interrupciones (Reset, NMI y HardFault) tienen prioridades fijas, mientras que el resto se puede programar hasta en 128 niveles de prioridad. Un valor numérico menor, es más prioritario. En la práctica, la cantidad de niveles programables lo define el fabricante, utilizando cierta cantidad de bits más significativos del registro de configuración de prioridad. Por ejemplo, para configurar una interrupción con un valor determinado de prioridad, en un procesador que utiliza 3 bits del registro de configuración de prioridad, se van a tener disponibles 8 niveles de prioridad: 0x00 (el más prioritario), 0x20, 0x40, 0x80, 0xA0, 0xC0 y 0xE0. Configurando el registro con el valor 11100000 (0xE0), tendríamos el valor menos prioritario. 

14. ¿Qué es el CMSIS? ¿Qué función cumple? ¿Quién lo provee? ¿Qué ventajas aporta?
    CMSIS es la capa de abstracción de hardware que es independiente a cualquier fabricante para la familia de procesadores Cortex-M. Con CMSIS se simplifica la reutilización de software y se acorta el tiempo de aprendizaje para nuevos desarrolladores. 

15. Cuando ocurre una interrupción, asumiendo que está habilitada ¿Cómo opera el microprocesador para atender a la subrutina correspondiente? Explique con un ejemplo
    Cuando una interrupción ocurre, el NVIC compara el nivel de prioridad de la interrupción con el nivel actual. Si la interrupción tiene mayor prioridad, la tarea que se está ejecutando se interrumpe y se guarda todo en contexto en los registros. A continuación pasa a ejecutarse el handler de la interrupción. Finalizado el handler, se ejecuta la excepción de retorno, en la cual se vuelve a cargar el contexto previo a la interrupción. Paralelamente al proceso de carga del contexto, el procesador comienza a cargar las instrucciones de la tarea previamente interrumpida para retornar lo más pronto posible.

17. ¿Cómo cambia la operación de stacking al utilizar la unidad de punto flotante?
    Al utilizar unidad de punto flotante además de los registros que se guardan normalmente, se agregan los registros S0 a S15 y FPSCR de la FPU.

16. Explique las características avanzadas de atención a interrupciones: tail chaining y late arrival.

17. ¿Qué es el systick? ¿Por qué puede afirmarse que su implementación favorece la portabilidad de los sistemas operativos embebidos?
    El systick es un timer descendente de 24 bits incorporado a los cortex M (siendo opcional en los M0 y M1). Permite realizar la temporización en sistemas operativos embebidos ya que se puede utilizar para generar la excepción de Systick. Al ser de muy fácil configuración, ya que basta con configurar el valor de recarga, se puede portar fácilmente a cualquier sistema operativo embebido.

18. ¿Qué funciones cumple la unidad de protección de memoria (MPU)?
    Se puede utilizar para hacer los sistemas embebidos más robustos y más seguros. Permite proteger el acceso a memoria. Puede evitar que ciertas aplicaciones accedan a áreas de memoria de otras aplicaciones, del kernel o periféricos sin los permisos adecuados. 

19. ¿Cuántas regiones pueden configurarse como máximo? ¿Qué ocurre en caso de haber solapamientos de las regiones? ¿Qué ocurre con las zonas de memoria no cubiertas por las regiones definidas?
    Se pueden configurar 8 regiones como máximo y una región de background. En caso de que una región de memoria se encuentre en dos regiones protegidas por la MPU, los atributos y permisos de acceso a memoria corresponderán a la región de mayor numeración. Si se intenta acceder a una región de memoria no definida, ocurrirá una excepción de falla, la cual puede ser una MemManage o HardFault. 

20. ¿Para qué se suele utilizar la excepción PendSV? ¿Cómo se relaciona su uso con el resto de las excepciones? Dé un ejemplo
    Se suele utilizar para resolver el problema de cambio de contexto cuando sucede una excepción antes de la excepción del Systick, lo que provoca la Usage Fault excepción. La excepción PendSV permite demorar el cambio de contexto hasta que se procesen todas las excepciones. Si el OS decide que es necesario un cambio de contexto, setea el pending status de la PendSV y lleva a cabo el cambio de contexto dentro de la excepción PendSV, ya que es la última en ejecutarse por ser la de más baja prioridad.

21. ¿Para qué se suele utilizar la excepción SVC? Expliquelo dentro de un marco de un sistema operativo embebido.
    Se genera por software y es parte del proceso de atención de una llamada al sistema operativo mediante una instrucción SVC

ISA
1. ¿Qué son los sufijos y para qué se los utiliza? Dé un ejemplo
    Los sufijos son agregados al final de las instrucciones para realizar ejecución condicional. Por ejemplo, se puede utilizar para comparar si el valor de un registro es menor a otro, con la instrucción B, con el sufijo LT, para realizar un salto, luego de comparar con la instrucción CMP.

2. ¿Para qué se utiliza el sufijo ‘s’? Dé un ejemplo
    Se utiliza para actualizar los flags de estado.
    Por ejemplo, lo podemos utilizar para comparar si un registro tiene determinado valor para luego ejectuar un salto a otra parte del programa:
    SUBS r0, #5
    bne  .salto

3. ¿Qué utilidad tiene la implementación de instrucciones de aritmética saturada? Dé un ejemplo con operaciones con datos de 8 bits.
    Permite que si una operación se va del rango máximo permitido por el tipo de dato, se fije el valor al rango máximo, en vez de irse al valor inicial. Esto es útil en ciertos caso en los que se desea que el valor de la operación no difiera tanto del resultado esperado.
    Por ejemplo, si se realiza una operacion de suma de 2 enteros sin signo de 8 bits, en la cual uno es 250 y el otro es 10, el resultado se va del rango permitido para 8 bits. Si se realiza sin aritmética saturada el resultado daría 4, pero con aritmética saturada daría 255. 

4. Describa brevemente la interfaz entre assembler y C ¿Cómo se reciben los argumentos de las funciones? ¿Cómo se devuelve el resultado? ¿Qué registros deben guardarse en la pila antes de ser modificados?
    Los argumentos de las funciones se reciben en los registros r0 a r3.
    El resultado se devuelve en el registro r0.
    Los registros r4 a r11 deben guardarse en la pila antes de ser modificados. 

5. ¿Qué es una instrucción SIMD? ¿En qué se aplican y que ventajas reporta su uso? Dé un ejemplo.
