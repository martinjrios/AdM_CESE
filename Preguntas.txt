Preguntas orientadoras
1. Describa brevemente los diferentes perfiles de familias de microprocesadores/microcontroladores de ARM. Explique alguna de sus diferencias características.
    En las familias de microcontroladores ARM podemos encontrar los siguientes perfiles:
    - Cortex A: procesadores de alto rendimiento.
    - Cortex R: procesadores orientados a sistemas de tiempo real donde se necesita baja latencia y alta capacidad de procesamiento.
    - Cortex M: procesadores orientados a dispositivos de consumo masivo y sistemas embebidos compactos. 

Cortex M
1. Describa brevemente las diferencias entre las familias de procesadores Cortex M0, M3 y M4.
    Los procesadores Cortex M0/M0+ fueron diseñados para bajo consumo y bajo costo, mientras que los M3 y M4 presentan mayor performance, agregando funcionalidades para el procesamiento digital de señales, unidad de protección de memoria, etc.

    La arquitectura de los procesadores M0 es Von Neumann (ARMv6-M), mientras que los procesadores M3 y M4 presentan arquitectura Harvard (ARMv7-M).

    Los procesadores M0 poseen un set de instrucciones reducido, utilizando la mayoria de las instrucciones Thumb y algunas Thumb-2, mientras que los procesadores M3 y M4, utilizan el set completo. 

    Los procesadores M0 y M3 no poseen unidad de punto flotante, mientras que en los M4 es opcional, de acuerdo al fabricante. 

    Los procesadores M3 y M4 poseen división por hardware y aritmética saturada, mientras que los M0 no. 

2. ¿Por qué se dice que el set de instrucciones Thumb permite mayor densidad de código? Explique
    Densidad de código se refiere a la cantidad de intrucciones necesarias para realizar una determinada operación y a cuánto espacio ocupa cada instrucción en memoria.
    El código nativo de ARM utiliza sólo instrucciones de 32 bits, lo que no permite generar una buena densidad de código. Con el set de instrucciones Thumb, se logra una mayor densidad de código al reducir el tamaño de la mayoría de las instrucciones de 32 bits a 16 bits, dejando las instrucciones de 32 bits para branches.

3. ¿Qué entiende por arquitectura load-store? ¿Qué tipo de instrucciones no posee este tipo de arquitectura?
    Una arquitectura load-store significa que para realizar cualquier operación con datos, primero deben ser cargados de la memoria a un registro del microprocesador, luego procesados y posteriormente, vueltos a grabar en memoria. Todo esto en intrucciones separadas. Esta arquitectura no permite a la mayoría de las instrucciones el acceso a la memoria, sólo permite instrucciones de carga y almacenamiento. 

4. ¿Cómo es el mapa de memoria de la familia?
    El mapa de memoria de la familia es plano con capacidad de direccionar 4 GB. 

5. ¿Qué ventajas presenta el uso de los “shadowed pointers” del PSP y el MSP?
    Tienen mayor utilidad en los sistemas operativos ya que permiten que haya un Stack Pointer para las tareas y otro para el sistema, por lo que si se corrompe el stack de la tareas, el sistema puede seguir funcionando.

6. Describa los diferentes modos de privilegio y operación del Cortex M, sus relaciones y como se conmuta de uno al otro. Describa un ejemplo en el que se pasa del modo privilegiado a no priviligiado y nuevamente a privilegiado.
    Existen dos modos de operación en los cortex M: Thread Mode y Handler Mode. En el modo Thread, se puede ejecutar código en modo privilegiado o no privilegiado. El modo Handler siempre se ejecuta en modo privilegiado.
    El pasaje de modo privilegiado a no privilegiado se hace por software, mientras que si se está en modo no privilegiado, sólo se puede volver al modo privilegiado mediante una interrupción.
    Un ejemplo de uso podría ser en un sistema operativo, en donde al iniciar el sistema, se arranca en modo privilegiado. Luego, las tareas se ejecutan en modo no privilegiado hasta que ocurre una interrupción, en donde dentro del Handler de la interrupción se está en modo privilegiado y se puede cambiar el registro de control del modo para pasar a modo privilegiado y ejecutar las tareas en ese modo. 

7. ¿Qué se entiende por modelo de registros ortogonal? Dé un ejemplo
    

8. ¿Qué ventajas presenta el uso de intrucciones de ejecución condicional (IT)? Dé un ejemplo

9. Describa brevemente las excepciones más prioritarias (reset, NMI, Hardfault).

10. Describa las funciones principales de la pila. ¿Cómo resuelve la arquitectura el llamado a funciones y su retorno?

11. Describa la secuencia de reset del microprocesador.

12. ¿Qué entiende por “core peripherals”? ¿Qué diferencia existe entre estos y el resto de los periféricos?

13. ¿Cómo se implementan las prioridades de las interrupciones? Dé un ejemplo

14. ¿Qué es el CMSIS? ¿Qué función cumple? ¿Quién lo provee? ¿Qué ventajas aporta?

15. Cuando ocurre una interrupción, asumiendo que está habilitada ¿Cómo opera el microprocesador para atender a la subrutina correspondiente? Explique con un ejemplo

17. ¿Cómo cambia la operación de stacking al utilizar la unidad de punto flotante?

16. Explique las características avanzadas de atención a interrupciones: tail chaining y late arrival.

17. ¿Qué es el systick? ¿Por qué puede afirmarse que su implementación favorece la portabilidad de los sistemas operativos embebidos?

18. ¿Qué funciones cumple la unidad de protección de memoria (MPU)?

19. ¿Cuántas regiones pueden configurarse como máximo? ¿Qué ocurre en caso de haber solapamientos de las regiones? ¿Qué ocurre con las zonas de memoria no cubiertas por las regiones definidas?

20. ¿Para qué se suele utilizar la excepción PendSV? ¿Cómo se relaciona su uso con el resto de las excepciones? Dé un ejemplo

21. ¿Para qué se suele utilizar la excepción SVC? Expliquelo dentro de un marco de un sistema operativo embebido.

ISA
1. ¿Qué son los sufijos y para qué se los utiliza? Dé un ejemplo

2. ¿Para qué se utiliza el sufijo ‘s’? Dé un ejemplo

3. ¿Qué utilidad tiene la implementación de instrucciones de aritmética saturada? Dé un ejemplo con operaciones con datos de 8 bits.

4. Describa brevemente la interfaz entre assembler y C ¿Cómo se reciben los argumentos de las funciones? ¿Cómo se devuelve el resultado? ¿Qué registros deben guardarse en la pila antes de ser modificados?

5. ¿Qué es una instrucción SIMD? ¿En qué se aplican y que ventajas reporta su uso? Dé un ejemplo.
